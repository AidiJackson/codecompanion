--- a/api.py
+++ b/api.py
@@ -1,6 +1,7 @@
 import os
 from fastapi import FastAPI, Body, Header, HTTPException, Depends
 from fastapi.middleware.cors import CORSMiddleware
+from fastapi.responses import JSONResponse

 from settings import settings
 from services.real_models import real_e2e

@@ -15,7 +16,7 @@
 )
 
 def require_token(
-    authorization: str | None = Header(default=None),
+    authorization: str | None = Header(default=None, alias="Authorization"),
     x_api_key: str | None = Header(default=None),
 ):
     """
@@ -29,6 +30
     return None
 
 # --- Friendly homepage so the root URL isn't a 404 ---
 @app.get("/", response_class=HTMLResponse)
 async def root():
     return """
@@ -50,6 +51
     return {"ok": True, "event_bus": settings.EVENT_BUS}
 
 # --- Keys (protected) ---
 @app.get("/keys", dependencies=[Depends(require_token)])
 async def keys():
     return {
@@ -62,6 +63
         return await real_e2e(objective)
     except HTTPException:
         raise
     except Exception:
-        raise HTTPException(status_code=500, detail="pipeline failed")
+        return JSONResponse(status_code=500, content={"detail": "pipeline failed"})
 
--- a/app.py
+++ b/app.py
@@ -1,6 +1,7 @@
 """
 CodeCompanion Orchestra v3 - Comprehensive JSON Schema-based Multi-Agent System
 """
 
+import streamlit.components.v1 as components
 import streamlit as st
 import asyncio
 import json
@@ -56,6 +57
 from core.router import DataDrivenRouter, RoutingContext
 from core.artifacts import ArtifactValidator, ArtifactHandler
 from core.event_streaming import RealTimeEventOrchestrator, StreamEvent, EventType as StreamEventType, EventStreamType
 
+from core.performance_tracker import PerformanceTracker
 from core.model_router import IntelligentRouter
 
 # Real execution engine import
@@ -66,6 +68
 from schemas.outcomes import TaskOutcome
 from core.cost_governor import CostGovernor, ProjectComplexity
 from monitoring.performance_tracker import PerformanceTracker
 
@@ -88,6 +91
 # Streamlit configuration
 st.set_page_config(
     page_title="CodeCompanion Orchestra v3",
     page_icon="ðŸŽ¼",
     layout="wide",
     initial_sidebar_state="expanded"
 )
 
+st.sidebar.title("Performance Monitoring")
 
 # Initialize database and event bus with strict configuration
 @st.cache_resource
--- a/services/httpwrap.py
+++ b/services/httpwrap.py
@@ -1,6 +1,7 @@
 import httpx, asyncio, time
 from typing import Callable, Any, Dict
 
+from fastapi.responses import JSONResponse
 
 async def post_json(url: str, headers: Dict[str,str]|None, json_body: Dict[str,Any], timeout_s=60, retries=2):
     last = None
@@ -5,6 +6
     for attempt in range(retries+1):
         try:
             async with httpx.AsyncClient(timeout=timeout_s) as client:
+                print(f"Sending POST request to {url} with body: {json_body}")
                 t0 = time.time()
                 r = await client.post(url, headers=headers, json=json_body)
                 t1 = time.time()
